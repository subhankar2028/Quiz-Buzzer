
quiz buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f5  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031d  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000164  00000000  00000000  0000154d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 81 00 	call	0x102	; 0x102 <main>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <display>:
void display(uint16_t val)
{
uint8_t disp[]={0,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F};


switch (val)
  6c:	8f 3e       	cpi	r24, 0xEF	; 239
  6e:	91 05       	cpc	r25, r1
  70:	49 f1       	breq	.+82     	; 0xc4 <display+0x58>
  72:	50 f4       	brcc	.+20     	; 0x88 <display+0x1c>
  74:	8f 3b       	cpi	r24, 0xBF	; 191
  76:	91 05       	cpc	r25, r1
  78:	69 f1       	breq	.+90     	; 0xd4 <display+0x68>
  7a:	8f 3d       	cpi	r24, 0xDF	; 223
  7c:	91 05       	cpc	r25, r1
  7e:	31 f1       	breq	.+76     	; 0xcc <display+0x60>
  80:	8f 37       	cpi	r24, 0x7F	; 127
  82:	91 05       	cpc	r25, r1
  84:	71 f5       	brne	.+92     	; 0xe2 <display+0x76>
  86:	2a c0       	rjmp	.+84     	; 0xdc <display+0x70>
  88:	8b 3f       	cpi	r24, 0xFB	; 251
  8a:	91 05       	cpc	r25, r1
  8c:	99 f0       	breq	.+38     	; 0xb4 <display+0x48>
  8e:	20 f4       	brcc	.+8      	; 0x98 <display+0x2c>
  90:	87 3f       	cpi	r24, 0xF7	; 247
  92:	91 05       	cpc	r25, r1
  94:	99 f0       	breq	.+38     	; 0xbc <display+0x50>
  96:	25 c0       	rjmp	.+74     	; 0xe2 <display+0x76>
  98:	8d 3f       	cpi	r24, 0xFD	; 253
  9a:	91 05       	cpc	r25, r1
  9c:	39 f0       	breq	.+14     	; 0xac <display+0x40>
  9e:	8e 3f       	cpi	r24, 0xFE	; 254
  a0:	91 05       	cpc	r25, r1
  a2:	f9 f4       	brne	.+62     	; 0xe2 <display+0x76>
{
case 0b11111110:
DDRA=~val;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	8a bb       	out	0x1a, r24	; 26
PORTA=~val;
  a8:	8b bb       	out	0x1b, r24	; 27
break;
  aa:	1b c0       	rjmp	.+54     	; 0xe2 <display+0x76>
case 0b11111101:
DDRA=~val;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	8a bb       	out	0x1a, r24	; 26
PORTA=~val;
  b0:	8b bb       	out	0x1b, r24	; 27
break;
  b2:	17 c0       	rjmp	.+46     	; 0xe2 <display+0x76>
case 0b11111011:
DDRA=~val;
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	8a bb       	out	0x1a, r24	; 26
PORTA=~val;
  b8:	8b bb       	out	0x1b, r24	; 27
break;
  ba:	13 c0       	rjmp	.+38     	; 0xe2 <display+0x76>
case 0b11110111:
DDRA=~val;
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	8a bb       	out	0x1a, r24	; 26
PORTA=~val;
  c0:	8b bb       	out	0x1b, r24	; 27
break;
  c2:	0f c0       	rjmp	.+30     	; 0xe2 <display+0x76>
case 0b11101111:
DDRA=~val;
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	8a bb       	out	0x1a, r24	; 26
PORTA=~val;
  c8:	8b bb       	out	0x1b, r24	; 27
break;
  ca:	0b c0       	rjmp	.+22     	; 0xe2 <display+0x76>
case 0b11011111:
DDRA=~val;
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	8a bb       	out	0x1a, r24	; 26
PORTA=~val;
  d0:	8b bb       	out	0x1b, r24	; 27
break;
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <display+0x76>
case 0b10111111:
DDRA=~val;
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	8a bb       	out	0x1a, r24	; 26
PORTA=~val;
  d8:	8b bb       	out	0x1b, r24	; 27
break;
  da:	03 c0       	rjmp	.+6      	; 0xe2 <display+0x76>
case 0b01111111:
DDRA=~val;
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	8a bb       	out	0x1a, r24	; 26
PORTA=~val;
  e0:	8b bb       	out	0x1b, r24	; 27
break;
}
while((PINB & 0b00000001)!=0)
  e2:	b0 9b       	sbis	0x16, 0	; 22
  e4:	0b c0       	rjmp	.+22     	; 0xfc <display+0x90>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	81 ee       	ldi	r24, 0xE1	; 225
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <display+0x80>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <display+0x8a>
  f6:	00 00       	nop
  f8:	b0 99       	sbic	0x16, 0	; 22
  fa:	f5 cf       	rjmp	.-22     	; 0xe6 <display+0x7a>
{
_delay_ms(100);
}

DDRA=0x00;
  fc:	1a ba       	out	0x1a, r1	; 26
PORTC=0<<0;
  fe:	15 ba       	out	0x15, r1	; 21
 100:	08 95       	ret

00000102 <main>:


int main(void)
{
	
DDRC=1<<0;
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	94 bb       	out	0x14, r25	; 20
DDRA=0x00;
 106:	1a ba       	out	0x1a, r1	; 26
PORTA=0xff;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	8b bb       	out	0x1b, r24	; 27
DDRB=(0<<PB0);
 10c:	17 ba       	out	0x17, r1	; 23
PORTB=(1<<PB0);
 10e:	98 bb       	out	0x18, r25	; 24
DDRC=0xff;
 110:	84 bb       	out	0x14, r24	; 20
{

if(PINA!=0xFF)
{
val=PINA;
PORTC=1<<0;
 112:	c1 e0       	ldi	r28, 0x01	; 1
DDRC=0xff;
uint16_t val=0;
while(1)
{

if(PINA!=0xFF)
 114:	89 b3       	in	r24, 0x19	; 25
 116:	8f 3f       	cpi	r24, 0xFF	; 255
 118:	e9 f3       	breq	.-6      	; 0x114 <main+0x12>
{
val=PINA;
 11a:	89 b3       	in	r24, 0x19	; 25
PORTC=1<<0;
 11c:	c5 bb       	out	0x15, r28	; 21
display(val);
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 36 00 	call	0x6c	; 0x6c <display>
 124:	f7 cf       	rjmp	.-18     	; 0x114 <main+0x12>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
